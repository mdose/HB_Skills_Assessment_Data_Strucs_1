Runtime

1. When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant?

Answer: O(n); Worst case: you'd have to look at every animal cracker in the box individually to see if one was an elephant.

2. Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) as n approaches infinity:
O(log n)
O(n^2)
O(n log n)
O(n)
O(2^n)
O(1)

(Hint: to write exponents in a text file, use a carrot, like so: n^2 or 2^n.)

Answer: O(1), O(log n), O(n), O(n log n), O(n^2), O(2^n) 

Stacks and Queues

1. In the following cases, would a stack or queue be a more appropriate data structure?
    1. The process of loading and unloading pallets onto a flatbed truck
    2. Putting bottle caps on bottles of beer as they roll down an assembly line
    3. Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)

Answer:
    1. Stack
    2. Queue
    3. Stack 

2. Describe two more situations where a queue would be an appropriate data structure.

Answer: 
    
    1. Tasks Lists
    2. buffers and caches that discard the oldest page when they get full

3. Describe two more situations where a stack would be an appropriate data structure.

Answer:
    
    1. “undo” in any program
    2. the back button in your browser

Linked Lists

1. Given the linked list below, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)

Answer: The boxes are the nodes(two boxes stuck together represent the two attributes of each node: the "data"--"Apple", "Berry", and "Cherry" boxes--and the "next" attribute which points to the next node in memory). The arrows are the path of the list that uses the "next" attr to connect the two nodes together.

2. What’s the difference between doubly- and singly-linked lists?

Answer: The ability to move in certain directions. Singly-linked lists start at the head and go to the next node until the tail (no backtracking), but Doubly-linked lists allow you to see the previous node AND next node (can travel both ways, up and down the list.)

3. Why is it faster to append to a linked list if we keep track of the tail as an attribute?

Answer: Because you don't have to search through the list each time to find the tail. It's much faster if you can go straight to the end and append right away instead of traversing the whole list each time.

Trees

1. Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burritos (starting at food)? (Assume nodes are enqueued in left-to-right order.) Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.

Answer: food, Italian, Indian, Meixcan, lasagna, pizza, tikka masala, saag, burritos!

2. Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? (Assume nodes are pushed in left-to-right order.) Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.

Answer: food, Italian, lasagna, pizza, thin-crust, Chicago-style!

How is a binary search tree different from other trees?

Answer: It has a O(log n) runtime instead of O(n), making it much faster. Each level reduces the search by half. There is also only ever two children nodes (one right and one left) for each level and also a pattern with "smaller" things on the left and "bigger" things on the right.
